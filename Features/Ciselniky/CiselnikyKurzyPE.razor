@page "/ciselniky/kurzy-pe"
@using DHL.Server.Features.Ciselniky.Models
@using DHL.Server.Features.Ciselniky.Interfaces
@using DHL.Server.Features.Ciselniky.Services
@using Microsoft.AspNetCore.Components.Forms
@inject IKurzyPEService KurzyPEService
@inject KurzyPEImportService ImportService
@inject IWebHostEnvironment Environment
@inject IDialogService DialogService
@using System.Timers

<MudPaper Class="p-4">

    <MudText Typo="Typo.h5" Class="mb-2">Plánované kurzy PE</MudText>

    <div class="mb-2">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateKurz"
        StartIcon="@Icons.Material.Filled.Add" Size="Size.Small">
            Nový kurz
        </MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="DeleteAllKurzy"
        StartIcon="@Icons.Material.Filled.DeleteForever" Class="ml-2" Size="Size.Small">
            Smazat vše
        </MudButton>
        <label class="mud-button-root mud-button mud-button-outlined mud-button-default ml-2"
        style="cursor: pointer; font-size: 0.85rem; padding: 6px 12px;">
            <MudIcon Icon="@Icons.Material.Filled.UploadFile" Class="mud-icon-root mud-icon-start" />
            <span class="mud-button-label">Nahrát CSV</span>
            <InputFile OnChange="HandleFileUpload" @ref="inputFileRef" class="d-none" />
        </label>
    </div>


    <MudTextField T="string"
                  Value="_searchString"
                  ValueChanged="SearchInputChanged"
                    ValueExpression="@(() => _searchString)"
                    Immediate="true"
                    Placeholder="Hledat..."
                    Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    Class="mb-3" />



    <MudTable T="KurzyPEDto"
    @ref="table"
    ServerData="LoadServerData"
    RowsPerPage="10"
    FixedHeader="true"
    Hover="true"
    Striped="true"
    Dense="true"
    Elevation="0"
    Height="400px">
        <HeaderContent>
            <MudTh>AP</MudTh>
            <MudTh>Název kurzu</MudTh>
            <MudTh>TC</MudTh>
            <MudTh>Zastávka</MudTh>
            <MudTh>PSČ</MudTh>
            <MudTh>Příjezd</MudTh>
            <MudTh>Odjezd</MudTh>
            <MudTh>Akce</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.AP</MudTd>
            <MudTd>@context.NazevKurzu</MudTd>
            <MudTd>@context.TC</MudTd>
            <MudTd>@context.Zastavka</MudTd>
            <MudTd>@context.PSCzastavky</MudTd>
            <MudTd>@context.Prijezd.ToString(@"hh\:mm")</MudTd>
            <MudTd>@context.Odjezd.ToString(@"hh\:mm")</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => EditKurz(context)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteKurz(context.Id)" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    @if (_isUploading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
    }


</MudPaper>

@code {
    private MudTable<KurzyPEDto>? table;
    private string _searchString = string.Empty;
    private InputFile? inputFileRef;
    private bool _isUploading = false;
    private Timer? _searchDebounceTimer;

    private async Task CreateKurz() => await OpenEditDialog(new KurzyPEDto());

    private async Task EditKurz(KurzyPEDto kurz) => await OpenEditDialog(kurz);

    private async Task OpenEditDialog(KurzyPEDto original)
    {
        var parameters = new DialogParameters { ["Model"] = original };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialogRef = await DialogService.ShowAsync<KurzyPEEditDialog>(
            original.Id == 0 ? "Nový kurz PE" : "Úprava kurzu PE", parameters, options);

        var result = await dialogRef.Result;

        if (result is { Canceled: false, Data: KurzyPEDto updated })
        {
            if (updated.Id == 0)
                await KurzyPEService.CreateAsync(updated);
            else
                await KurzyPEService.UpdateAsync(updated.Id, updated);

            if (table is not null)
                await table.ReloadServerData();
        }
    }

    private async Task DeleteKurz(int id)
    {
        var confirmed = await DialogService.ShowMessageBox("Potvrzení", "Opravdu chcete smazat kurz?", "Ano", "Ne");
        if (confirmed ?? false)
        {
            await KurzyPEService.DeleteAsync(id);
            if (table is not null)
                await table.ReloadServerData();
        }
    }

    private async Task DeleteAllKurzy()
    {
        _isUploading = true;
        try
        {
            var confirmed = await DialogService.ShowMessageBox("Potvrzení", "Smazat všechny kurzy?", "Ano", "Ne");
            if (confirmed ?? false)
            {
                var all = await KurzyPEService.GetAllAsync();
                foreach (var kurz in all)
                    await KurzyPEService.DeleteAsync(kurz.Id);

                if (table is not null)
                    await table.ReloadServerData();
            }
        }
        finally
        {
            _isUploading = false;
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        _isUploading = true;
        StateHasChanged();

        try
        {
            var file = e.File;
            if (file == null || !file.Name.EndsWith(".csv", StringComparison.OrdinalIgnoreCase))
            {
                await DialogService.ShowMessageBox("Chyba", "Prosím nahrajte soubor ve formátu CSV.");
                return;
            }

            var tempFilePath = Path.Combine(Environment.ContentRootPath, "Temp", $"kurzy_{Guid.NewGuid()}.csv");
            Directory.CreateDirectory(Path.GetDirectoryName(tempFilePath)!);

            using (var fileStream = new FileStream(tempFilePath, FileMode.Create, FileAccess.Write, FileShare.None))
            {
                await file.OpenReadStream(10 * 1024 * 1024).CopyToAsync(fileStream);
            }

            var count = await ImportService.ImportFromCsvAsync(tempFilePath);

            File.Delete(tempFilePath);
            await DialogService.ShowMessageBox("Import dokončen", $"Načteno záznamů: {count}");

            if (table is not null)
                await table.ReloadServerData();
        }
        finally
        {
            _isUploading = false;
            StateHasChanged();
        }
    }


    private async Task<TableData<KurzyPEDto>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        _isUploading = true;
        try
        {
            var allData = await KurzyPEService.GetAllAsync();

            var filtered = string.IsNullOrWhiteSpace(_searchString)
                ? allData
                : allData.Where(x =>
                    (x.AP?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (x.NazevKurzu?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (x.Zastavka?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (x.TC?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)).ToList();

            var pagedData = filtered
                .OrderBy(x => x.AP)
                .Skip(state.Page * state.PageSize)
                .Take(state.PageSize)
                .ToList();

            return new TableData<KurzyPEDto>
                {
                    TotalItems = filtered.Count,
                    Items = pagedData // nikdy null!
                };
        }
        finally
        {
            _isUploading = false; 
        }
   
    }

    private async Task OnSearchBlurred()
    {
        if (table is not null)
            await table.ReloadServerData();
    }

    private void SearchInputChanged(string value)
    {
        _searchString = value;
        _searchDebounceTimer?.Stop();
        _searchDebounceTimer?.Dispose();

        _searchDebounceTimer = new Timer(500); // zpoždění 500 ms
        _searchDebounceTimer.Elapsed += async (_, _) =>
        {
            _searchDebounceTimer?.Stop();
            await InvokeAsync(async () =>
            {
                if (table is not null)
                    await table.ReloadServerData();
            });
        };
        _searchDebounceTimer.AutoReset = false;
        _searchDebounceTimer.Start();
    }


}
