
@using DHL.Server.Features.Ciselniky.Models
@using DHL.Server.Features.Ciselniky.Interfaces
@inject IVozidloService VozidloService
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudPaper Class="p-4">
    <MudText Typo="Typo.h5" Class="mb-2">Seznam vozidel</MudText>

    <div class="mb-2">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateItem" StartIcon="@Icons.Material.Filled.Add">
            Nové vozidlo
        </MudButton>
    </div>

    <MudTable Items="_items" Hover="true" Dense="true" Bordered="true">
        <HeaderContent>
            <MudTh>RZ</MudTh>
            <MudTh>Stav</MudTh>
            <MudTh>Založeno</MudTh>
            <MudTh>Akce</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.RZ</MudTd>
            <MudTd>
                <MudChip T="string" Color="@(context.IsActive ? Color.Success : Color.Default)" Variant="Variant.Filled" Size="Size.Small">
                    @(context.IsActive ? "Aktivní" : "Neaktivní")
                </MudChip>
            </MudTd>
            <MudTd>@context.CreatedAt.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => EditItem(context)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteItem(context.Id)" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<VozidloDto> _items = new();

    protected override async Task OnInitializedAsync()
    {
        _items = await VozidloService.GetAllAsync();
    }

    private async Task CreateItem()
    {
        await OpenEditDialog(new VozidloDto());
    }

    private async Task EditItem(VozidloDto item)
    {
        await OpenEditDialog(item);
    }

    private async Task OpenEditDialog(VozidloDto original)
    {
        var parameters = new DialogParameters { ["Model"] = original };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<VozidloDialog>(original.Id == 0 ? "Nové vozidlo" : "Úprava vozidla", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled && result.Data is VozidloDto updated)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userName = authState.User.Identity?.Name ?? "system";

            updated.CreatedBy = string.IsNullOrWhiteSpace(updated.CreatedBy) ? userName : updated.CreatedBy;

            if (updated.Id == 0)
            {
                var saved = await VozidloService.CreateAsync(updated);
                _items.Add(saved);
            }
            else
            {
                var saved = await VozidloService.UpdateAsync(updated.Id, updated) ?? updated;
                var index = _items.FindIndex(x => x.Id == saved.Id);
                if (index >= 0)
                    _items[index] = saved;
            }

            _items = await VozidloService.GetAllAsync();
            StateHasChanged();
        }
    }

    private async Task DeleteItem(int id)
    {
        var confirmed = await DialogService.ShowMessageBox("Potvrzení", "Opravdu chcete smazat toto vozidlo?", "Ano", "Ne");
        if (confirmed == true)
        {
            await VozidloService.DeleteAsync(id);
            _items = await VozidloService.GetAllAsync();
        }
    }
}
