@page "/dispecerska-sluzba"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using ClosedXML.Excel;
@attribute [Authorize]
@using DHL.Server.Features.Dispatching.Interfaces
@using DHL.Server.Models.Entities
@inject IDispatchService DispatchService
@inject IDialogService DialogService
@inject IJSRuntime JS


<MudContainer MaxWidth="MaxWidth.False" Class="mt-4 px-4">
    <MudStack Spacing="2">
        <MudText Typo="Typo.h5" Class="font-weight-bold">Dispečerská služba</MudText>

        <MudGrid>
            <MudItem xs="12">
                <MudStack Row Wrap="Wrap.Wrap" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">

                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenCreateDialog">
                        + Vytvořit
                    </MudButton>

                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                        <MudButton Variant="Variant.Text" OnClick="ExportToExcel">Export</MudButton>
                        <MudButton Variant="Variant.Text">Aktualizovat</MudButton>
                        <MudTextField @bind-Value="searchText"
                                      Placeholder="Vyhledat..."
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      Margin="Margin.Dense"
                                      Class="ml-4" />
                    </MudStack>
                </MudStack>
            </MudItem>
        </MudGrid>

        <MudTable Items="GetFiltered()"
                  Hover="true"
                  Dense="true"
                  Bordered="true"
                  Elevation="0"
                  Class="mt-2">
            <HeaderContent>
                <MudTh>Vytvořeno</MudTh>
                <MudTh>DSPU</MudTh>
                <MudTh>Datum ku</MudTh>
                <MudTh>Typ</MudTh>
                <MudTh>Klíč</MudTh>
                <MudTh>Popis</MudTh>
                <MudTh>Aktualizováno</MudTh>
                <MudTh>Akce</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.CreatedAt.ToString("d. M. yyyy H:mm")</MudTd>
                <MudTd>@context.LocationName</MudTd>
                <MudTd>@context.UserTime.ToString("d. M. yyyy H:mm")</MudTd>
                <MudTd>@context.TypeEnumName</MudTd>
                <MudTd>@context.KeyEnumName</MudTd>
                <MudTd>@context.Description</MudTd>
                <MudTd>@context.UpdatedAt?.ToString("d. M. yyyy H:mm")</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" Color="Color.Default" Size="Size.Small" OnClick="@(() => CopyToClipboard(context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" OnClick="@(() => OpenEditDialog(context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" />
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText Color="Color.Error" Typo="Typo.subtitle2" Class="px-4 py-2">
                    Zatím žádná data k dispozici.
                </MudText>
            </NoRecordsContent>
        </MudTable>
    </MudStack>
</MudContainer>

    @if (_isUploading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
    }

@code {
    @implements IDisposable
    private bool _isUploading = false;

    private CancellationTokenSource _cts = new();

    private List<DispatchModelEntity> FilteredDispatches = new();
    private string searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            FilteredDispatches = await DispatchService.GetDispatchesAsync(_cts.Token);
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("Načítání zrušeno.");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Chyba při načítání: " + ex.Message);
            FilteredDispatches = new();
        }

        if (FilteredDispatches == null || !FilteredDispatches.Any())
        {
            FilteredDispatches = new List<DispatchModelEntity>
            {
                new() {
                    CreatedAt = DateTime.Now.AddDays(-1),
                    LocationName = "DSPU Brno",
                    UserTime = DateTime.Now,
                    TypeEnumName = "Nepravidelnosti HPS",
                    KeyEnumName = "B D+1",
                    Description = "Brumlík nenastoupil a pak si stěžoval na řidiče :-)",
                    UpdatedAt = DateTime.Now
                },
                new() {
                    CreatedAt = DateTime.Now.AddDays(-1),
                    LocationName = "DSPU Praha",
                    UserTime = DateTime.Now,
                    TypeEnumName = "Nepravidelnosti ObPS",
                    KeyEnumName = "B D+1",
                    Description = "Brumlík",
                    UpdatedAt = DateTime.Now
                }
            };
        }
    }

    public void Dispose() => _cts.Cancel();

    private IEnumerable<DispatchModelEntity> GetFiltered()
    {
        if (string.IsNullOrWhiteSpace(searchText))
            return FilteredDispatches;

        var lower = searchText.ToLower();
        return FilteredDispatches.Where(d =>
            (d.LocationName?.ToLower().Contains(lower) ?? false) ||
            (d.TypeEnumName?.ToLower().Contains(lower) ?? false) ||
            (d.KeyEnumName?.ToLower().Contains(lower) ?? false) ||
            (d.Description?.ToLower().Contains(lower) ?? false)
        );
    }

    private async Task CopyToClipboard(DispatchModelEntity entity)
    {
        var content = $"DSPU: {entity.LocationName}\n" +
                      $"Typ: {entity.TypeEnumName}\n" +
                      $"Klíč: {entity.KeyEnumName}\n" +
                      $"Popis: {entity.Description}";
        try
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", content);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chyba při kopírování do schránky: {ex.Message}");
        }
    }

    private void OpenCreateDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
         DialogService.Show<CreateDispatchDialog>("Vytvořit záznam", options);
    }

    private async Task OpenEditDialog(DispatchModelEntity entity)
    {
        var parameters = new DialogParameters { ["Dispatch"] = entity };

        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                NoHeader = false,
                Position = DialogPosition.Center
            };

        var dialogRef = await DialogService.ShowAsync<EditDispatchDialog>("Upravit záznam", parameters, options);
        var result = await dialogRef.Result;

        if (result is not null && !result.Canceled && result.Data is DispatchModelEntity updated)
        {
            var original = FilteredDispatches.FirstOrDefault(x => x == entity);
            if (original is not null)
            {
                original.LocationName = updated.LocationName;
                original.UserTime = updated.UserTime;
                original.TypeEnumName = updated.TypeEnumName;
                original.KeyEnumName = updated.KeyEnumName;
                original.Description = updated.Description;
                original.UpdatedAt = updated.UpdatedAt;
            }

            StateHasChanged();
        }
    }


    private async Task ExportToExcel()
    {
        _isUploading = true;
        try
        {
            using var workbook = new XLWorkbook();
            var worksheet = workbook.Worksheets.Add("Dispečerská služba");

            // Header
            worksheet.Cell(1, 1).Value = "Vytvořeno";
            worksheet.Cell(1, 2).Value = "TC";
            worksheet.Cell(1, 3).Value = "Datum";
            worksheet.Cell(1, 4).Value = "Typ";
            worksheet.Cell(1, 5).Value = "Klíč";
            worksheet.Cell(1, 6).Value = "Popis";
            worksheet.Cell(1, 7).Value = "Aktualizováno";

            // Data
            var filtered = GetFiltered().ToList();
            for (int i = 0; i < filtered.Count; i++)
            {
                var d = filtered[i];
                worksheet.Cell(i + 2, 1).Value = d.CreatedAt;
                worksheet.Cell(i + 2, 2).Value = d.LocationName;
                worksheet.Cell(i + 2, 3).Value = d.UserTime;
                worksheet.Cell(i + 2, 4).Value = d.TypeEnumName;
                worksheet.Cell(i + 2, 5).Value = d.KeyEnumName;
                worksheet.Cell(i + 2, 6).Value = d.Description;
                worksheet.Cell(i + 2, 7).Value = d.UpdatedAt;
            }

            worksheet.Columns().AdjustToContents();

            using var stream = new MemoryStream();
            workbook.SaveAs(stream);
            var content = stream.ToArray();
            var fileName = $"ExportDHL_{DateTime.Now:ddMMyy_HHmmss}.xlsx";

            await JS.InvokeVoidAsync("downloadFileFromBytes", fileName, Convert.ToBase64String(content));
        }
        finally
        {
            _isUploading = false;
        }
    }


}